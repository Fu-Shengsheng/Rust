// 所有权（ownership）是rust的核心功能之一
// 它使得无需进行gc即可保证内存安全

// stack中的所有数据都必须占用已知且固定的大小
// 在编译时大小未知或可能发生变化的数据需要存放在heap（堆）中
// 访问堆上的数据比栈慢

// 调用函数时传递给函数的值和函数的局部变量被压入栈中，函数结束时被移除

// 跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的。

fn main() {
    println!("Hello, world!");
}
